from database import Database

class Events(Database):

    def __init__(self):
        super().__init__()
        self.path = "/"
        self.set_path(self.path)
        self.template = self.get_event_struct()


    def get_event_struct(self) -> dict:
        """
        Get event structure from database
        
        Returns:
            dictionary: event structure
        """
        self.set_path("/Version/Events/")
        data = self.get_db_data()

        template = data["template"]
        template["version"] = float(data["v"])
        self.template = template
        return template


    def get_event(self, event_id: str) -> dict:
        """
        Get event from database
        
        Args:
            event_id (string): Event id / random id generated by database
            
        Returns:
            dictionary: event
        """
        self.set_path("/Events/" + event_id)
        return self.get_db_data()


    def get_events(self) -> dict:
        """
        Get events from database
        
        Returns:
            dictionary: events
        """
        self.set_path("/Events/")
        return self.get_db_data()


    def get_events_by_date(self, date: str) -> dict:
        """
        Get events from database by date
        
        Args:
            date (string): Date in format YYYY-MM-DD
            
        Returns:
            dictionary: events
        """
        self.set_path("/Events/")
        events = self.get_db_data()

        for key in self.template.keys():
            if "date" in str(key).lower():
                term = key
                break

        events_by_date = {}
        for event in events:
            if events[event][term] == date:
                events_by_date[event] = events[event]

        return events_by_date


    def get_events_by_month(self) -> dict:
        """
        Create a dictionary of events by month

        Returns:
            dictionary: Events by month
        """

        # --------------------------------------
        #   Get the date key from the template
        # --------------------------------------
        for key in self.template.keys():
            if "date" in str(key).lower():
                term = key
                break

        # ---------------------------
        #   Get the events and sort 
        #   them into a dictionary 
        #          by month
        # ---------------------------
        events = self.get_events()
        events_by_month = {}
        for key, event in events.items():
            event_updated = self.check_event(event)
            if event_updated != event:
                self.edit_event(key, event_updated)

            if int(event_updated[term].split("-")[1]) not in events_by_month.keys():
                events_by_month[int(event_updated[term].split("-")[1])] = {key: event_updated}
            
            else:
                events_by_month[int(event_updated[term].split("-")[1])].update({key: event_updated})

        return events_by_month


    def edit_event(self, event_id: str, data: dict):
        """
        Edit event in database
        
        Args:
            event_id (string): Event id / random id generated by database
            data (dictionary): Data to be updated in database
            
        Returns:
            bool: Did process succeed?
        """
        existing_data = self.check_event(data)
        self.set_path("/Events/" + event_id)
        return self.update_db(existing_data)


    def add_event(self, data: dict) -> bool:
        """
        Add event to database
        
        Args:
            data (dictionary): Data to be added to database
            
        Returns:
            bool: Did process succeed?
        """
        data = self.check_event(data)
        self.set_path("/Events/")
        return self.append_db(data)


    def check_event(self, data: dict) -> dict:
        """
        Check if data is valid for template
        
        Args:
            data (dictionary): Data to be checked
            
        Returns:
            bool: Did process succeed?
        """
        self.get_event_struct()

        data_updated = data

        if not self._check_versions(data):
            if float(self.template["version"]) > float(data["version"]) and not self._template_check(data):
                # data has out of date event structure
                data_updated = self.template.copy()
                for key in data_updated.keys():
                    for key2 in data.keys():
                        if str(key2) in str(key):
                            data_updated[key] = data[key2]
                            break

                    else:
                        data_updated[key] = ""


            elif float(self.template["version"]) < float(data["version"]) and self._template_check(data):
                data_updated = data
                data_updated["version"] = self.template["version"]
            
            elif float(self.template["version"]) < float(data["version"]) and self._template_check(data):
                # new event structure has been given
                new_struct = self.template.copy()
                for key in data.keys():
                    for key2 in new_struct.keys():
                        if key in key2:
                            new_struct[key2] = data[key]
                            break
                    else:
                        new_struct[key] = ""
                
                # Update the database with new structure
                self.set_path("/Version/Events/")
                self.update_db(new_struct)
                self.set_path("/Version/")
                version_data = self.get_db_data()
                version_data["v"] = float(data["version"])
                self.update_db(version_data)
                self.get_event_struct()

                data_updated = data
        if data_updated != data:
            data_updated["version"] = float(self.template["version"])
        return data_updated


    def _template_check(self, data: dict) -> bool:
        """
        Check if data is valid for template
        
        Args:
            data (dictionary): Data to be checked
            
        Returns:
            bool: Did process succeed?
        """
        self.get_event_struct()
        for key in self.template.keys():
            if key not in data.keys():
                return False

        return True


    def _check_versions(self, data: dict) -> bool:
        """
        Check if data is valid for template
        
        Args:
            data (dictionary): Data to be checked
            
        Returns:
            bool: Did process succeed?
        """
        if float(data["version"]) != float(self.template["version"]):
            return False

        return True



if __name__ == "__main__":
    events = Events()
    print(events.get_event_struct())